#!/bin/bash
set -euo pipefail

# Claude Code Documentation Helper Script v0.3
# This script handles all /docs command functionality
# Installation path: ~/.claude-code-docs/claude-docs-helper.sh

# Fixed installation path (no need for placeholder replacement)
DOCS_PATH="$HOME/.claude-code-docs"
MANIFEST="$DOCS_PATH/docs/docs_manifest.json"
MIGRATION_INFO="$DOCS_PATH/.migration_info"

# Check if we should use colors (disabled in pipes or non-TTY)
if [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]]; then
    # Colors for output
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    # No colors
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Function to print colored output
print_color() {
    local color=$1
    shift
    if [[ -n "$color" ]]; then
        echo -e "${color}$*${NC}"
    else
        echo "$*"
    fi
}

# Function to sanitize input arguments
sanitize_input() {
    # Remove any potentially dangerous characters
    echo "$1" | sed 's/[;&|`$()]//g'
}

# Function to print documentation header
print_doc_header() {
    echo "üìö COMMUNITY MIRROR: https://github.com/ericbuess/claude-code-docs"
    echo "üìñ OFFICIAL DOCS: https://docs.anthropic.com/en/docs/claude-code"
    echo ""
}

# Function to check and display migration notice
check_migration_notice() {
    if [[ -f "$MIGRATION_INFO" ]]; then
        local migrated_from=$(jq -r '.migrated_from // ""' "$MIGRATION_INFO" 2>/dev/null)
        local user_files=$(jq -r '.user_files_detected[]? // empty' "$MIGRATION_INFO" 2>/dev/null)
        
        if [[ -n "$migrated_from" ]]; then
            print_color "$BLUE" "üì¶ Documentation has been migrated to ~/.claude-code-docs"
            
            if [[ -n "$user_files" ]]; then
                print_color "$YELLOW" ""
                print_color "$YELLOW" "‚ö†Ô∏è  Custom files preserved at: $migrated_from"
                echo "$user_files" | while read -r file; do
                    echo "  - $file"
                done
            fi
            echo ""
        fi
        
        # Remove migration info after displaying
        rm -f "$MIGRATION_INFO"
    fi
}

# Function to auto-update docs if needed
auto_update() {
    cd "$DOCS_PATH" 2>/dev/null || return 1
    
    # Get current branch
    local BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main")
    
    # Quick fetch to check for updates (fast)
    if ! git fetch --quiet origin "$BRANCH" 2>/dev/null; then
        # Fetch failed - can't sync
        return 2
    fi
    
    local LOCAL=$(git rev-parse HEAD 2>/dev/null)
    local REMOTE=$(git rev-parse origin/"$BRANCH" 2>/dev/null)
    
    if [[ "$LOCAL" != "$REMOTE" ]]; then
        # Updates available - do the pull
        echo "üîÑ Updating documentation..." >&2
        git pull --quiet origin "$BRANCH" 2>&1 | grep -v "Merge made by" || true
        
        # Check if installer needs updating
        local INSTALLER_VERSION=$(jq -r '.installer_version // "0.2"' "$MANIFEST" 2>/dev/null)
        local VERSION_INT=$(echo "$INSTALLER_VERSION" | sed 's/^0\.//')
        
        if [[ $VERSION_INT -ge 3 ]]; then
            echo "üîß Updating Claude Code Docs installer..." >&2
            ./install.sh >/dev/null 2>&1
        fi
    fi
    
    return 0  # Success (either updated or already up-to-date)
}

# Function to show documentation sync status
show_freshness() {
    print_doc_header
    # Check migration notice first
    check_migration_notice
    
    # Read manifest
    if [[ ! -f "$MANIFEST" ]]; then
        print_color "$RED" "‚ùå Error: Documentation not found at ~/.claude-code-docs"
        echo "Please reinstall with:"
        echo "curl -fsSL https://raw.githubusercontent.com/ericbuess/claude-code-docs/main/install.sh | bash"
        exit 1
    fi
    
    # Try to sync with GitHub
    auto_update
    local sync_status=$?
    
    if [[ $sync_status -eq 2 ]]; then
        print_color "$YELLOW" "‚ö†Ô∏è  Could not sync with GitHub (using local cache)"
        echo "Check your internet connection or GitHub access"
    else
        print_color "$GREEN" "‚úÖ Documentation is synced with GitHub"
    fi
    
    # Show current branch and version
    cd "$DOCS_PATH" 2>/dev/null || exit 1
    local BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    local installer_version=$(jq -r '.installer_version // "0.2"' "$MANIFEST" 2>/dev/null)
    
    echo "üìç Branch: ${BRANCH}"
    echo "üì¶ Version: ${installer_version}"
}

# Function to read documentation
read_doc() {
    # Auto-update before reading
    auto_update
    
    local topic=$(sanitize_input "$1")
    local doc_path="$DOCS_PATH/docs/${topic}.md"
    
    if [[ -f "$doc_path" ]]; then
        print_doc_header
        cat "$doc_path"
        echo ""
        echo "üìñ Official page: https://docs.anthropic.com/en/docs/claude-code/$topic"
    else
        print_color "$RED" "‚ùå Documentation not found: $topic"
        echo ""
        echo "Available topics:"
        ls "$DOCS_PATH/docs" | grep '\.md$' | sed 's/\.md$//' | sort | column -c 80
    fi
}

# Function to list available documentation
list_docs() {
    print_doc_header
    check_migration_notice
    
    # Auto-update before listing
    auto_update
    
    echo "Available documentation topics:"
    echo ""
    ls "$DOCS_PATH/docs" | grep '\.md$' | sed 's/\.md$//' | sort | column -c 80
    echo ""
    echo "Usage: /docs <topic> or /docs -t to check freshness"
}

# Function for hook check (auto-update)
hook_check() {
    # This is now just a passthrough since auto_update handles everything
    exit 0
}

# Function to show what's new
whats_new() {
    print_doc_header
    check_migration_notice
    
    # Auto-update first
    auto_update
    
    cd "$DOCS_PATH" 2>/dev/null || {
        print_color "$RED" "‚ùå Error: Could not access documentation directory"
        exit 1
    }
    
    echo "üìö Recent documentation updates (last 7 days):"
    echo ""
    
    # Quick links at the top for visibility
    echo "üìé Quick links:"
    echo "‚Ä¢ Full changelog: https://github.com/ericbuess/claude-code-docs/commits/main/docs" 
    echo "‚Ä¢ All docs: https://docs.anthropic.com/en/docs/claude-code"
    echo "‚Ä¢ Mirror repo: https://github.com/ericbuess/claude-code-docs"
    echo ""
    
    # Get recent commits that actually updated documentation
    # Look for commits from the last 7 days only
    local doc_commits=$(git log --oneline --since="7 days ago" --grep="Update Claude Code docs" -- 'docs/*.md' 2>/dev/null | head -5)
    
    if [[ -z "$doc_commits" ]]; then
        # Fallback: look for any commits that changed docs
        doc_commits=$(git log --oneline -50 -- docs/*.md 2>/dev/null | grep -v "feat:" | grep -v "fix:" | grep -v "refactor:" | grep -v "Add TODO" | grep -v "Merge" | head -10)
    fi
    
    if [[ -z "$doc_commits" ]]; then
        echo "No recent documentation updates found."
        return
    fi
    
    # Track all docs mentioned for summary
    local all_docs_mentioned=()
    
    # Show each commit with actual changes
    while IFS= read -r commit; do
        local hash=$(echo "$commit" | cut -d' ' -f1)
        local message=$(echo "$commit" | cut -d' ' -f2-)
        local date=$(git show -s --format=%cr "$hash")
        
        print_color "$BLUE" "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        print_color "$BLUE" "‚Ä¢ $message ($date)"
        
        # Show which docs changed
        local changed_docs=$(git diff-tree --no-commit-id --name-only -r "$hash" -- docs/*.md | sed 's|docs/||' | sed 's|\.md$||')
        if [[ -n "$changed_docs" ]]; then
            echo "  Docs updated: $(echo $changed_docs | tr '\n' ', ' | sed 's/, $//')"
            
            # Show actual changes for each file
            for doc_file in $(git diff-tree --no-commit-id --name-only -r "$hash" -- docs/*.md); do
                local filename=$(basename "$doc_file" .md)
                # Track this doc for summary
                all_docs_mentioned+=("$filename")
                echo ""
                echo "  üìÑ $filename:"
                echo "  üìñ View docs: https://docs.anthropic.com/en/docs/claude-code/$filename"
                
                # Extract meaningful changes from the diff
                local diff_output=$(git diff "${hash}^..${hash}" -- "$doc_file" 2>/dev/null || echo "")
                
                # Look for added sections (lines starting with +#)
                local added_sections=$(echo "$diff_output" | grep '^+#' | sed 's/^+//' | sed 's/^#* *//' | head -3)
                
                # Look for removed sections
                local removed_sections=$(echo "$diff_output" | grep '^-#' | sed 's/^-//' | sed 's/^#* *//' | head -3)
                
                # Look for key additions (new features, commands, etc)
                local key_additions=$(echo "$diff_output" | grep -E '^\+.*\b(new|added|feature|command|option|support|enable|integration)\b' -i | sed 's/^+//' | sed 's/^[[:space:]]*//' | head -3)
                
                # Summarize changes
                if [[ -n "$added_sections" ]]; then
                    echo "  ‚ûï New sections:"
                    echo "$added_sections" | while read -r section; do
                        [[ -n "$section" ]] && echo "     - $section"
                    done
                fi
                
                if [[ -n "$removed_sections" ]]; then
                    echo "  ‚ûñ Removed sections:"
                    echo "$removed_sections" | while read -r section; do
                        [[ -n "$section" ]] && echo "     - $section"
                    done
                fi
                
                if [[ -n "$key_additions" && -z "$added_sections" ]]; then
                    echo "  ‚ú® Key changes:"
                    echo "$key_additions" | while read -r change; do
                        [[ -n "$change" ]] && echo "     - ${change:0:80}..."
                    done
                fi
                
                # If we couldn't extract meaningful info, show basic stats
                if [[ -z "$added_sections" && -z "$removed_sections" && -z "$key_additions" ]]; then
                    local additions=$(git diff --numstat "${hash}^..${hash}" -- "$doc_file" | awk '{print $1}')
                    local deletions=$(git diff --numstat "${hash}^..${hash}" -- "$doc_file" | awk '{print $2}')
                    
                    if [[ $additions -gt 0 || $deletions -gt 0 ]]; then
                        echo "  üìù Changes: +${additions}/-${deletions} lines"
                    fi
                fi
            done
            
            # Add compact link at the end of each commit
            echo ""
            echo "  üîó Links: Commit https://github.com/ericbuess/claude-code-docs/commit/$hash | Diff .../commit/$hash.diff"
        fi
    done <<< "$doc_commits"
    
    echo ""
    echo "üí° For detailed explanations of any changes, read the specific documentation"
    echo "   using: /docs <topic> (e.g., /docs hooks, /docs setup)"
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìö COMMUNITY MIRROR - NOT AFFILIATED WITH ANTHROPIC"
    echo "Official docs: https://docs.anthropic.com/en/docs/claude-code"
    echo "Mirror repo: https://github.com/ericbuess/claude-code-docs"
    echo ""
    
    # Put all links at the very bottom so they don't get collapsed
    echo "üìé QUICK LINKS TO ALL CHANGES:"
    
    # First, list all changed docs with links
    local unique_docs=()
    if [[ ${#all_docs_mentioned[@]} -gt 0 ]]; then
        mapfile -t unique_docs < <(printf '%s\n' "${all_docs_mentioned[@]}" | sort -u)
    fi
    
    if [[ ${#unique_docs[@]} -gt 0 ]]; then
        echo ""
        echo "Documentation pages:"
        for doc in "${unique_docs[@]}"; do
            echo "‚Ä¢ $doc: https://docs.anthropic.com/en/docs/claude-code/$doc"
        done
    fi
    
    # Then list all commits with links
    echo ""
    echo "Git commits:"
    while IFS= read -r commit; do
        local hash=$(echo "$commit" | cut -d' ' -f1)
        local date=$(git show -s --format=%cr "$hash")
        echo "‚Ä¢ $date: https://github.com/ericbuess/claude-code-docs/commit/$hash"
    done <<< "$doc_commits"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

# Function for uninstall
uninstall() {
    print_doc_header
    print_color "$GREEN" "Uninstall Information"
    print_color "$GREEN" "===================="
    echo ""
    
    # Show docs mirror uninstall info
    echo "üìö To uninstall Claude Code Documentation Mirror:"
    print_color "$YELLOW" "~/.claude-code-docs/uninstall.sh"
    echo ""
    echo "This will remove:"
    echo "  ‚Ä¢ The /docs command from ~/.claude/commands/docs.md"
    echo "  ‚Ä¢ The auto-update hook from ~/.claude/settings.json"
    echo "  ‚Ä¢ The installation directory ~/.claude-code-docs"
    echo ""
    
    # Search for Claude Code uninstall info in docs
    echo "üíª To uninstall Claude Code itself:"
    
    # Check setup.md for uninstall info
    if [[ -f "$DOCS_PATH/docs/setup.md" ]]; then
        local uninstall_info=$(grep -i -A 5 -B 2 "uninstall" "$DOCS_PATH/docs/setup.md" 2>/dev/null | head -20)
        if [[ -n "$uninstall_info" ]]; then
            echo "From the setup documentation:"
            echo "$uninstall_info" | sed 's/^/  /'
        else
            echo "‚Ä¢ For installation-specific uninstall instructions, see: /docs setup"
            echo "‚Ä¢ Or check: /docs troubleshooting"
        fi
    else
        echo "‚Ä¢ For installation-specific uninstall instructions, see: /docs setup"
        echo "‚Ä¢ Or check: /docs troubleshooting"
    fi
    echo ""
    echo "For more details on Claude Code uninstallation, visit:"
    echo "https://docs.anthropic.com/en/docs/claude-code/setup"
}

# Combine all arguments into one string for easier parsing
# Also clean up any escaped quotes that might come from Claude Code
FULL_ARGS="$*"
FULL_ARGS="${FULL_ARGS//\\\'/\'}"  # Replace \' with '
FULL_ARGS="${FULL_ARGS//\\\"/\"}"  # Replace \" with "

# Main command handling
case "${1:-}" in
    -t|--check)
        show_freshness
        # Check if remaining args form "what's new"
        shift
        remaining_args="$*"
        if [[ "$remaining_args" =~ ^what.?s?\ ?new.*$ ]]; then
            echo ""
            whats_new
        elif [[ -n "$remaining_args" ]]; then
            echo ""
            read_doc "$(sanitize_input "$remaining_args")"
        fi
        ;;
    hook-check)
        hook_check
        ;;
    uninstall)
        uninstall
        ;;
    "whats-new"|"what's-new"|"whatsnew"|"what's new"|"whats"|"what"|"whats-new?"|"what's-new?")
        # Handle various forms of "what's new"
        if [[ "${2:-}" == "new" ]] || [[ "$FULL_ARGS" =~ new ]]; then
            whats_new
        else
            # Just "what" without "new" - treat as doc lookup
            read_doc "$1"
        fi
        ;;
    "")
        list_docs
        ;;
    *)
        # Check if the full arguments match "what's new" pattern
        # Be very flexible to handle various quote escaping issues
        if [[ "$FULL_ARGS" =~ what.*new ]] || [[ "$1 ${2:-}" =~ what.*new ]]; then
            whats_new
        else
            # Check migration notice before reading docs
            check_migration_notice
            
            # Default: read documentation (header printed in read_doc)
            read_doc "$1"
        fi
        ;;
esac