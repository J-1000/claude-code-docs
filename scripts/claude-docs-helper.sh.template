#!/bin/bash
set -euo pipefail

# Claude Code Documentation Helper Script v0.3
# This script handles all /docs command functionality
# Installation path: ~/.claude-code-docs/claude-docs-helper.sh

# Fixed installation path (no need for placeholder replacement)
DOCS_PATH="$HOME/.claude-code-docs"
MANIFEST="$DOCS_PATH/docs/docs_manifest.json"
LAST_PULL="$DOCS_PATH/.last_pull"
LAST_CHECK="$DOCS_PATH/.last_check"
MIGRATION_INFO="$DOCS_PATH/.migration_info"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Function to sanitize input arguments
sanitize_input() {
    # Remove any potentially dangerous characters
    echo "$1" | sed 's/[;&|`$()]//g'
}

# Function to get OS-specific date command
get_date_cmd() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "gdate"  # macOS with GNU coreutils
        # Fallback to regular date if gdate not available
        if ! command -v gdate &> /dev/null; then
            echo "date"
        fi
    else
        echo "date"  # Linux
    fi
}

# Function to calculate time differences
calculate_time_diff() {
    local timestamp="$1"
    local now=$(date +%s)
    local then
    
    # Try different date parsing methods
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS date command
        then=$(date -j -f "%Y-%m-%dT%H:%M:%S" "${timestamp%%.*}" +%s 2>/dev/null || echo 0)
    else
        # Linux date command - handle ISO format properly
        # Remove microseconds and Z if present
        local clean_timestamp="${timestamp%%.*}"
        clean_timestamp="${clean_timestamp%Z}"
        then=$(date -d "$clean_timestamp" +%s 2>/dev/null || echo 0)
    fi
    
    if [[ $then -eq 0 ]]; then
        echo 0
    else
        # Return absolute value of difference (handles future dates)
        local diff=$(( (now - then) / 60 ))  # minutes
        echo ${diff#-}  # Remove negative sign if present
    fi
}

# Function to check and display migration notice
check_migration_notice() {
    if [[ -f "$MIGRATION_INFO" ]]; then
        local migrated_from=$(jq -r '.migrated_from // ""' "$MIGRATION_INFO" 2>/dev/null)
        local user_files=$(jq -r '.user_files_detected[]? // empty' "$MIGRATION_INFO" 2>/dev/null)
        
        if [[ -n "$migrated_from" ]]; then
            print_color "$BLUE" "📦 Documentation has been migrated to ~/.claude-code-docs"
            
            if [[ -n "$user_files" ]]; then
                print_color "$YELLOW" ""
                print_color "$YELLOW" "⚠️  Custom files preserved at: $migrated_from"
                echo "$user_files" | while read -r file; do
                    echo "  - $file"
                done
            fi
            echo ""
        fi
        
        # Remove migration info after displaying
        rm -f "$MIGRATION_INFO"
    fi
}

# Function to auto-update docs if needed
auto_update() {
    cd "$DOCS_PATH" 2>/dev/null || return 1
    
    # Quick fetch to check for updates (fast)
    git fetch --quiet origin main 2>/dev/null || return 1
    
    local LOCAL=$(git rev-parse HEAD 2>/dev/null)
    local REMOTE=$(git rev-parse origin/main 2>/dev/null)
    
    if [[ "$LOCAL" != "$REMOTE" ]]; then
        # Updates available - do the pull
        echo "🔄 Updating documentation..." >&2
        git pull --quiet origin main 2>&1 | grep -v "Merge made by" || true
        echo $(date +%s) > "$LAST_PULL"
        
        # Check if installer needs updating
        local INSTALLER_VERSION=$(jq -r '.installer_version // "0.2"' "$MANIFEST" 2>/dev/null)
        local VERSION_INT=$(echo "$INSTALLER_VERSION" | sed 's/^0\.//')
        
        if [[ $VERSION_INT -gt 3 ]]; then
            echo "🔧 Updating Claude Code Docs installer..." >&2
            ./install.sh >/dev/null 2>&1
        fi
        
        return 0  # Updated
    fi
    
    return 1  # No updates
}

# Function to show documentation freshness
show_freshness() {
    # Check migration notice first
    check_migration_notice
    
    # Read manifest
    if [[ ! -f "$MANIFEST" ]]; then
        print_color "$RED" "❌ Error: Documentation not found at ~/.claude-code-docs"
        echo "Please reinstall with:"
        echo "curl -fsSL https://raw.githubusercontent.com/ericbuess/claude-code-docs/main/install.sh | bash"
        exit 1
    fi
    
    # Auto-update and check status
    cd "$DOCS_PATH" 2>/dev/null || exit 1
    git fetch --quiet origin main 2>/dev/null || true
    
    local LOCAL=$(git rev-parse HEAD 2>/dev/null)
    local REMOTE=$(git rev-parse origin/main 2>/dev/null)
    
    if [[ "$LOCAL" != "$REMOTE" ]]; then
        print_color "$YELLOW" "📥 Updates available (run any /docs command to update)"
    else
        print_color "$GREEN" "✅ Documentation is up to date"
    fi
    
    local installer_version=$(jq -r '.installer_version // "0.2"' "$MANIFEST" 2>/dev/null)
    echo "📅 Installer version: ${installer_version}"
}

# Function to read documentation
read_doc() {
    # Auto-update before reading
    auto_update
    
    local topic=$(sanitize_input "$1")
    local doc_path="$DOCS_PATH/docs/${topic}.md"
    
    if [[ -f "$doc_path" ]]; then
        cat "$doc_path"
    else
        print_color "$RED" "❌ Documentation not found: $topic"
        echo ""
        echo "Available topics:"
        ls "$DOCS_PATH/docs" | grep '\.md$' | sed 's/\.md$//' | sort | column -c 80
    fi
}

# Function to list available documentation
list_docs() {
    check_migration_notice
    
    # Auto-update before listing
    auto_update
    
    echo "Available documentation topics:"
    echo ""
    ls "$DOCS_PATH/docs" | grep '\.md$' | sed 's/\.md$//' | sort | column -c 80
    echo ""
    echo "Usage: /docs <topic> or /docs -t to check freshness"
}

# Function for hook check (auto-update)
hook_check() {
    # This is now just a passthrough since auto_update handles everything
    exit 0
}

# Function to show what's new
whats_new() {
    check_migration_notice
    
    # Auto-update first
    auto_update
    
    cd "$DOCS_PATH" 2>/dev/null || {
        print_color "$RED" "❌ Error: Could not access documentation directory"
        exit 1
    }
    
    echo "📚 Recent documentation updates:"
    echo ""
    
    # Get commits that actually updated documentation
    # Look for commits with "Update Claude Code docs" that changed docs/ directory
    local doc_commits=$(git log --oneline -50 --grep="Update Claude Code docs" -- docs/*.md 2>/dev/null | head -10)
    
    if [[ -z "$doc_commits" ]]; then
        # Fallback: look for any commits that changed docs
        doc_commits=$(git log --oneline -50 -- docs/*.md 2>/dev/null | grep -v "feat:" | grep -v "fix:" | grep -v "refactor:" | grep -v "Add TODO" | grep -v "Merge" | head -10)
    fi
    
    if [[ -z "$doc_commits" ]]; then
        echo "No recent documentation updates found."
        return
    fi
    
    # Show each commit with actual changes
    while IFS= read -r commit; do
        local hash=$(echo "$commit" | cut -d' ' -f1)
        local message=$(echo "$commit" | cut -d' ' -f2-)
        local date=$(git show -s --format=%cr "$hash")
        
        print_color "$BLUE" "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        print_color "$BLUE" "• $message ($date)"
        
        # Add GitHub diff link
        echo "  🔗 View changes: https://github.com/ericbuess/claude-code-docs/commit/$hash"
        
        # Show which docs changed and sample of changes
        local changed_docs=$(git diff-tree --no-commit-id --name-only -r "$hash" -- docs/*.md | sed 's|docs/||' | sed 's|\.md$||')
        if [[ -n "$changed_docs" ]]; then
            echo "  Changed: $(echo $changed_docs | tr '\n' ', ' | sed 's/, $//')"
            echo ""
            
            # Show actual changes for each file
            for doc_file in $(git diff-tree --no-commit-id --name-only -r "$hash" -- docs/*.md); do
                local filename=$(basename "$doc_file" .md)
                echo "  📄 $filename:"
                
                # Get a summary of what changed (show first 5 additions/deletions)
                local changes_shown=0
                git diff "${hash}^..${hash}" -- "$doc_file" | grep -E "^[+-]" | grep -v "^[+-]{3}" | while read -r line; do
                    if [[ $changes_shown -lt 5 ]]; then
                        if [[ "$line" =~ ^\+ ]]; then
                            echo "    ${line}"
                            ((changes_shown++))
                        elif [[ "$line" =~ ^- ]]; then
                            echo "    ${line}"
                            ((changes_shown++))
                        fi
                    fi
                done
                
                # Count changes
                local additions=$(git diff --numstat "${hash}^..${hash}" -- "$doc_file" | awk '{print $1}')
                local deletions=$(git diff --numstat "${hash}^..${hash}" -- "$doc_file" | awk '{print $2}')
                echo "    (${additions} additions, ${deletions} deletions)"
                echo ""
            done
        fi
    done <<< "$doc_commits"
}

# Function for uninstall
uninstall() {
    print_color "$GREEN" "Claude Code Documentation Mirror - Uninstaller"
    print_color "$GREEN" "============================================="
    echo ""
    echo "This will remove:"
    echo "  1. The docs command: ~/.claude/commands/docs.md"
    echo "  2. The auto-update hook from: ~/.claude/settings.json"
    echo "  3. The installation directory: ~/.claude-code-docs"
    echo ""
    
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 0
    fi
    
    # Remove command
    rm -f ~/.claude/commands/docs.md
    print_color "$GREEN" "✓ Removed command file"
    
    # Remove hook
    if [[ -f ~/.claude/settings.json ]]; then
        cp ~/.claude/settings.json ~/.claude/settings.json.backup
        jq '.hooks.PreToolUse = [(.hooks.PreToolUse // [])[] | select(.hooks[0].command | contains("claude-code-docs") | not)]' ~/.claude/settings.json > ~/.claude/settings.json.tmp
        
        # Clean up empty arrays/objects
        jq 'if .hooks.PreToolUse == [] then .hooks |= if . == {PreToolUse: []} then {} else del(.PreToolUse) end else . end | if .hooks == {} then del(.hooks) else . end' ~/.claude/settings.json.tmp > ~/.claude/settings.json
        rm -f ~/.claude/settings.json.tmp
        print_color "$GREEN" "✓ Removed hook from settings"
    fi
    
    # Remove directory
    cd "$HOME"  # Move out of the directory
    rm -rf "$DOCS_PATH"
    print_color "$GREEN" "✓ Removed installation directory"
    echo ""
    print_color "$GREEN" "✅ Uninstall complete!"
}

# Main command handling
case "${1:-}" in
    -t|--check)
        show_freshness
        if [[ -n "${2:-}" ]]; then
            echo ""
            read_doc "$(sanitize_input "$2")"
        fi
        ;;
    hook-check)
        hook_check
        ;;
    uninstall)
        uninstall
        ;;
    "whats-new"|"what's-new"|"whatsnew"|"what's new")
        whats_new
        ;;
    "")
        list_docs
        ;;
    *)
        # Check if it might be "what's new" with space
        if [[ "$1" == "what's" && "$2" == "new" ]]; then
            whats_new
        else
            # Check migration notice before reading docs
            check_migration_notice
            
            # Default: read documentation
            print_color "$BLUE" "📚 Reading from local docs (run /docs -t to check freshness)"
            echo ""
            read_doc "$1"
        fi
        ;;
esac